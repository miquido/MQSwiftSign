###################### PROJECT CONFIGURATION ######################
# You can provide those vars directly or by using $(ENV_VARS). In some cases you **should** provide them by env vars (e. g. cert content).
# Not all of them are required; if any of these don't suit your needs, just omit it.
# If not provided, an argument for the absent value will not be set for the execution (check PARAMETER SETTING section in Makefile).

## Path to the MQSwiftSign binary file:
MQSWIFTSIGN_DIR=./

##### TESTING #####

## Testing device name and iOS version, e.g. iOS Simulator,name=iPhone 14,OS=16.2
TEST_PLATFORM=
## Scheme on which the test action will be executed
TEST_SCHEME=

##### UPLOAD #####
# Required if you want to upload your binary to TestFlight.

## ID of the API key; you can generate one here: https://appstoreconnect.apple.com/access/api. This is the alphanumerical part of the generated file name AuthKey_XXXXXXX.p8
ASC_KEY_ID=
## Issuer id; visible on https://appstoreconnect.apple.com/access/api
ASC_KEY_ISSUER=
## Base64'd content of the .p8 key file. For security reasons, it should be provided in ENV variable.
ASC_KEY_CONTENT?=

##### MQSwiftSign Options #####
# Also available under --help command and in README.md
# Base64 encoded content of the certificate file. For security reasons, it should be provided in ENV variable.
CERT_CONTENT?=
# Password for the certificate file. For security reasons, it should be provided in ENV variable.
CERT_PASSWORD?=
# Temporary keychain name. If not provided, the tool will use name derived from certificate.
KEYCHAIN_NAME=
# Temporary keychain password. If not provided, random string will be used.
KEYCHAIN_PASSWORD=
# Path for provisioning profiles to be installed.
PROVISIONING_PATH=
# Distribution method for creating export options plist.
DISTRIBUTION_METHOD=
# Custom ACL groups/partitions to which access to keychain item will be granted.
CUSTOM_ACLS=
# Absolute paths to apps that are allowed access to the keychain item without user confirmation.
APPLICATIONS=

##### BUILD OPTIONS - IOS & REACT NATIVE #####
# Required only for iOS and React Native actions.
# `--shell-script` argument will be executed with `xcodebuild archive` using those parameters.
# Providing (-workspacePath and -schemeName) or (-projectPath and -targetName) or (-projectPath and -schemeName) is enough.
PROJECT_PATH=
IOS_TARGET_NAME=

WORKSPACE_PATH=
SCHEME_NAME=

# If not provided, the default one is taken from project config
CONFIGURATION_NAME=
# To workaround Xcode's habit to build against first available target -  which in many cases is a macos application
SDK=iphoneos
# Specifies the path for the archive produced. If not provided, default path will be: ~/Library/Developer/Xcode/Archives/<year>-<month>-<day>
# It is strongly recommended to provide this path if you want later to export it to IPA.
ARCHIVE_PATH=./archives/archive.xcarchive

##### BUILD OPTIONS - FLUTTER #####
# Required only for Flutter actions.

# Build configuration, release by default.
FLUTTER_BUILD_CONFIGURATION=release

# If provided, it will be also used to provide target main file (under path /lib/main_$(FLAVOR_NAME).dart)
FLAVOR_NAME=

# If not provided, the defaults from project configurations are taken
BUILD_NUMBER=

#### BUILD OPTIONS - COMMON #####
# Common options for all platforms.
# If DISTRIBUTION_METHOD paremeter is provided, but this parameter isn't, plist will be created from project settings using default paths - Flutter: ./ios/ExportOptionsPlists/exportOption.plist, iOS: ./ExportOptionsPlists/exportOption.plist
# If DISTRIBUTION_METHOD paremeter is not provided, but this parameter is, then you should provide export plist in provided path manually.
EXPORT_OPTIONS_PLIST_PATH=
# Specifies the destination path for the exported ipa, rather than the exact location for the generated file. During upload, altool will pick up anything with the .ipa extension in defined path.
EXPORT_PATH=
